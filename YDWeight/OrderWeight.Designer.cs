//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2018/05/01 23:34:07
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Windows.Forms;

namespace MainContext
{

    [DatabaseAttribute(Name = "main")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class MainDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(MainDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertOrderWeight(OrderWeight instance);
        partial void UpdateOrderWeight(OrderWeight instance);
        partial void DeleteOrderWeight(OrderWeight instance);

        #endregion

        public MainDataContext() :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public MainDataContext(MappingSource mappingSource) :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            return "Data Source="+Application.StartupPath + "/data.db";
            //System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            //if (connectionStringSettings == null)
            //    throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            //return connectionStringSettings.ConnectionString;
        }

        public MainDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<OrderWeight> OrderWeights
        {
            get
            {
                return this.GetTable<OrderWeight>();
            }
        }
    }
}

namespace MainContext
{

    /// <summary>
    /// There are no comments for MainContext.OrderWeight in the schema.
    /// </summary>
    [Table(Name = @"""main"".OrderWeight")]
    public partial class OrderWeight : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _OrderId;

        private System.Nullable<double> _Weight;

        private string _ScanTime;

        private string _EmNo;

        private string _EmName;

        private System.Nullable<long> _Count;

        private System.Nullable<long> _CreateBy;

        private string _CreateOn;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnOrderIdChanging(string value);
        partial void OnOrderIdChanged();
        partial void OnWeightChanging(System.Nullable<double> value);
        partial void OnWeightChanged();
        partial void OnScanTimeChanging(string value);
        partial void OnScanTimeChanged();
        partial void OnEmNoChanging(string value);
        partial void OnEmNoChanged();
        partial void OnEmNameChanging(string value);
        partial void OnEmNameChanged();
        partial void OnCountChanging(System.Nullable<long> value);
        partial void OnCountChanged();
        partial void OnCreateByChanging(System.Nullable<long> value);
        partial void OnCreateByChanged();
        partial void OnCreateOnChanging(string value);
        partial void OnCreateOnChanged();
        #endregion

        public OrderWeight()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Storage = "_OrderId", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging("OrderId");
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Weight in the schema.
        /// </summary>
        [Column(Storage = "_Weight", DbType = "REAL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Weight
        {
            get
            {
                return this._Weight;
            }
            set
            {
                if (this._Weight != value)
                {
                    this.OnWeightChanging(value);
                    this.SendPropertyChanging("Weight");
                    this._Weight = value;
                    this.SendPropertyChanged("Weight");
                    this.OnWeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ScanTime in the schema.
        /// </summary>
        [Column(Storage = "_ScanTime", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ScanTime
        {
            get
            {
                return this._ScanTime;
            }
            set
            {
                if (this._ScanTime != value)
                {
                    this.OnScanTimeChanging(value);
                    this.SendPropertyChanging("ScanTime");
                    this._ScanTime = value;
                    this.SendPropertyChanged("ScanTime");
                    this.OnScanTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmNo in the schema.
        /// </summary>
        [Column(Storage = "_EmNo", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string EmNo
        {
            get
            {
                return this._EmNo;
            }
            set
            {
                if (this._EmNo != value)
                {
                    this.OnEmNoChanging(value);
                    this.SendPropertyChanging("EmNo");
                    this._EmNo = value;
                    this.SendPropertyChanged("EmNo");
                    this.OnEmNoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmName in the schema.
        /// </summary>
        [Column(Storage = "_EmName", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string EmName
        {
            get
            {
                return this._EmName;
            }
            set
            {
                if (this._EmName != value)
                {
                    this.OnEmNameChanging(value);
                    this.SendPropertyChanging("EmName");
                    this._EmName = value;
                    this.SendPropertyChanged("EmName");
                    this.OnEmNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Count in the schema.
        /// </summary>
        [Column(Storage = "_Count", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Count
        {
            get
            {
                return this._Count;
            }
            set
            {
                if (this._Count != value)
                {
                    this.OnCountChanging(value);
                    this.SendPropertyChanging("Count");
                    this._Count = value;
                    this.SendPropertyChanged("Count");
                    this.OnCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateBy in the schema.
        /// </summary>
        [Column(Storage = "_CreateBy", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> CreateBy
        {
            get
            {
                return this._CreateBy;
            }
            set
            {
                if (this._CreateBy != value)
                {
                    this.OnCreateByChanging(value);
                    this.SendPropertyChanging("CreateBy");
                    this._CreateBy = value;
                    this.SendPropertyChanged("CreateBy");
                    this.OnCreateByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateOn in the schema.
        /// </summary>
        [Column(Storage = "_CreateOn", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string CreateOn
        {
            get
            {
                return this._CreateOn;
            }
            set
            {
                if (this._CreateOn != value)
                {
                    this.OnCreateOnChanging(value);
                    this.SendPropertyChanging("CreateOn");
                    this._CreateOn = value;
                    this.SendPropertyChanged("CreateOn");
                    this.OnCreateOnChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
